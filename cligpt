#!/bin/bash

version="v2.0.0"
name=$(basename "$0")
config="${HOME}/.config/cligpt"
dotenv="${config}/config"
historyPath="${config}/history"
logPath="${config}/log"
dependencies="curl jq bat base64"
declare chatHistory

# echo_err <msg>
function echo_err() {
    [ -z "$1" ] && exit 1
    echo "ERROR : $1" > /dev/stderr
    echo_log "ERROR : $1"
}

# echo_info <msg>
function echo_info() {
    [ -z "$1" ] && exit 1
    echo "$1"
    echo_log "$1"
}

# echo_log <msg>
function echo_log() {
    [ -z "$1" ] && exit 1
    local date=$(date "+%Y-%m-%d %H:%M:%S")
    echo -e "[$date] $1" >> "$logPath"
}

function input() {
    [ -z "$1" ] && echo_err $"input : prompt is needed" && exit 1

    local inputText=""
    exec 3<&0 # sauvegarde de l'entrée standard
    exec < /dev/tty # redirection de l'entrée vers le terminal
    read -r -p "$1" inputText
    exec 0<&3 # restauration de l'entrée standard

    [ -z "$inputText" ] && input "$1"

    echo "$inputText"
}

function helpMain() {
    echo -e $"Usage : $(basename "$0") [option] [command]

Option :
-h or --help ........................... Show help
-v or --version ........................ Show version
-l or --list ........................... List all available model
-i or --inerte ......................... Do nothing except saving prompt in history

Command :
text ................................... Generate text
image .................................. Generate image"

    exit 0
}

function helpText() {
    echo -e $"Usage : $name [generalOption] text [option] [prompt]

Option :
-h or --help ........................... Show help text command
-m or --model <model> .................. Select model (default : $TEXT_MODEL)
-t or --temp <temperature> ............. Set temperature (default : $TEXT_TEMP)
-s or --system [text] .................. Instruction with role system (use \"-\" for stdin)
-c or --clear .......................... Clear history
-l or --list-history ................... List history

Example :
$name text # Interactive mode
$name text \"some prompt with role user\"
cat somefile.txt | $name text -s - # Instruction mode
cat somefile.txt | $name text -s - \"some prompt with role user\"
$name text -s \"some prompt with role system\" \"some prompt with role user\""

    exit 0
}

function helpImage() {
    echo -e $"Usage : $name [generalOption] image [option] <prompt>

Option :
-h or --help ........................... Show help image command
-m or --model <model> .................. Select model (default : $IMAGE_MODEL)
-n or --nb <number> .................... Number of image to generate (default : $IMAGE_NB)
-s or --size <size> .................... Size of image (default : $IMAGE_SIZE)
-o or --output <name> .................. Get image in file

Example :
$name image \"some prompt with role user\"
$name image -o image.png \"some prompt with role user\""

    exit 0
}

function writeConfig() {
    echo "API_KEY=";
    echo "API_ROUTE=https://api.openai.com/v1";
    echo "TEXT_MODEL=gpt-3.5-turbo";
    echo "TEXT_TEMP=0.7";
    echo "IMAGE_MODEL=dall-e-3";
    echo "IMAGE_NB=1";
    echo "IMAGE_SIZE=1024x1024";
}

function initConfig() {
    [ ! -d "$config" ] && mkdir "$config" && echo_info "Config are generated"
    [ ! -f "$dotenv" ] && writeConfig > "$dotenv" && echo_info "Dotenv file is generated"
    [ ! -f "$historyPath" ] && touch "$historyPath"
}

# saveHistory <text>
function saveHistory() {
    [ ! -f "$historyPath" ] && echo_err "saveHistory : History file not found" && exit 1
    [ -z "$1" ] && echo_err "saveHistory : Parameter is required" && return 1
    [ "$1" == "null" ] && return 1

    chatHistory+=("$1")
    echo "$1" >> "$historyPath"
}

function loadHistory() {
    [ ! -f "$historyPath" ] && echo_err "loadHistory : History file not found" && exit 1

    while read -r line; do
        chatHistory+=("$line")
    done < "$historyPath"
}

function checkDependencies() {
    for dependency in $dependencies; do
        ! command -v "$dependency" > /dev/null 2>&1 && \
            echo_err "Dependency \"$dependency\" not found" && exit 1
    done
}

function verification() {
    [ -z "$API_KEY" ] && echo_err "API_KEY is needed" && exit 1
    [ -z "$TEXT_MODEL" ] && echo_err "Model is needed" && exit 1
    [ -z "$API_ROUTE" ] && echo_err "API_ROUTE is needed" && exit 1
    [ -z "$TEXT_TEMP" ] && echo_err "Temperature is needed" && exit 1
    [ -z "$IMAGE_MODEL" ] && echo_err "Image model is needed" && exit 1
    [ -z "$IMAGE_NB" ] && echo_err "Number of image is needed" && exit 1
    [ -z "$IMAGE_SIZE" ] && echo_err "Size of image is needed" && exit 1
}

function readConfig() {
    [ ! -f "$dotenv" ] && echo_err "readConfig : Dotenv file not found" && exit 1

    local k
    local v

    while read -r var; do
        [ "${var:0:1}" = "#" ] && continue
        k=${var%=*}
        v=${var#*=}
        [ -n "$k" ] && export "$k=$v"
    done < "$dotenv"
}

# sendTextRequest <text> [format]
function sendTextRequest() {
    [ -z "$1" ] && echo_err "sendTextRequest : Parameter is required" && exit 1
    local format=$([ -z "$2" ] && echo 0 || echo "$2")

    local content=$(echo -n "$1" | jq -Rs .)
    saveHistory "{\"role\":\"user\",\"content\":$content}"
    local nbElem=${#chatHistory[@]}
    local data="{\"model\":\"$TEXT_MODEL\",\"messages\":["
    data+="${chatHistory[0]}"

    if [ "$nbElem" -gt 1 ]; then
        for i in $(seq 1 $(( nbElem-1 ))); do
            data+=",${chatHistory[$i]}"
        done
    fi

    data+="],\"temperature\":$TEXT_TEMP}"

    local result=$(curl -s \
        -X POST "$API_ROUTE/chat/completions" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $API_KEY" \
        -d "$data" | jq -c '.choices[0].message'
    )

    [ "$result" == "null" ] || [ -z "$result" ] && echo_err "Something wrong with API" && exit 1

    saveHistory "$result"
    local role=$(echo "$result" | jq -r '.role')
    local content=$(echo "$result" | jq -r '.content')

    [ "$format" -eq 1 ] && echo -e "\n\e[31m$role>\e[0m"
    echo "$content" | bat -p -l md
}

function listModel() {
    curl -s "$API_ROUTE/models" \
        -H "Authorization: Bearer $API_KEY" | \
        jq -r '.data[].id'
}

function interactiveMode() {
    while true; do
        printf "\n"
        sendTextRequest "$(input $'\e[34muser>\e[0m ')" 1
    done
}

# systemText <text>
function systemText() {
    [ -z "$1" ] && echo_err "systemText : Parameter is required" && exit 1
    local systemStr=$([ "$1" == "-" ] && cat /dev/stdin || echo "$1")
    local content=$(echo -n "$systemStr" | jq -Rs .)
    saveHistory "{\"role\":\"system\",\"content\":$content}"
}

# sendImageGenerationRequest <text>
function sendImageGenerationRequest() {
    [ -z "$1" ] && echo_err "sendImageGenerationRequest : Parameter is required" && exit 1

    local format=$([ -z "$output" ] && echo "url" || echo "b64_json")
    local content=$(echo -n "$1" | jq -Rs .)
    local data="{\"model\":\"$IMAGE_MODEL\",\"prompt\":$content,\"n\":$IMAGE_NB,\"size\":\"$IMAGE_SIZE\",\"response_format\":\"$format\"}"
    local result=$(curl -s \
        -X POST "$API_ROUTE/images/generations" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $API_KEY" \
        -d "$data"
    )

    if echo "$result" | grep -q "error"; then
        local error=$(echo "$result" | jq -r '.error.message')
        echo_err "$error"
        exit 1
    fi

    [ "$result" == "null" ] || [ -z "$result" ] && echo_err "Something wrong with API" && exit 1
    local image=$(echo "$result" | jq -r ".data[].$format")

    if [ "$format" == "b64_json" ]; then
        echo "$image" | base64 -d > "$output"
        echo_info "Image output to \"$output\""
        exit 0
    fi
    
    echo "$image"
}

function textCommand() {
    for _ in $(seq 1 $#); do
        case $1 in
            -h | --help)
                helpText;;
            -m | --model)
                TEXT_MODEL=$2
                shift;;
            -t | --temp)
                TEXT_TEMP=$2
                shift;;
            -c | --clear)
                echo -n "" > "$historyPath"
                exit 0;;
            -l | --list-history)
                bat -p -l json "$historyPath"
                exit 0;;
            -s | --system)
                systemText "$2"
                shift;;
            "") ;;
            -*)
                echo_err $"Unknown parameter \"$1\""
                exit 1;;
            *)
                text=$1
                shift
        esac
        shift
    done

    verification

    [ $inerte -eq 1 ] && exit 0

    if [ -z "$text" ]; then
        interactiveMode
    else
        sendTextRequest "$text"
    fi
}

function imageCommand() {
    local output=""

    for _ in $(seq 1 $#); do
        case $1 in
            -h | --help)
                helpImage;;
            -m | --model)
                IMAGE_MODEL=$2
                shift;;
            -n | --nb)
                IMAGE_NB=$2
                shift;;
            -s | --size)
                IMAGE_SIZE=$2
                shift;;
            -o | --output)
                output=$2
                shift;;
            "") ;;
            -*)
                echo_err $"Unknown parameter \"$1\""
                exit 1;;
            *)
                text=$1
                shift
        esac
        shift
    done

    verification

    [ $inerte -eq 1 ] && exit 0
    [ -z "$text" ] && echo_err "Image prompt is needed" && exit 1

    sendImageGenerationRequest "$text"
}

function main() {
    local text=""
    local inerte=0

    for _ in $(seq 1 $#); do
        case $1 in
            -h | --help)
                helpMain;;
            -v | --version)
                echo $version
                exit 0;;
            -l | --list)
                listModel
                exit 0;;
            -i | --inerte)
                inerte=1;;
            text)
                shift
                textCommand "$@"
                exit 0;;
            image)
                shift
                imageCommand "$@"
                exit 0;;
            "") ;;
            *)
                echo_err $"Unknown parameter \"$1\""
                exit 1;;
        esac
        shift
    done

    helpMain
}

checkDependencies
initConfig
readConfig
loadHistory
main "$@"
