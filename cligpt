#!/bin/bash

version="v1.0.0"
text=""
systemText=""
config="${HOME}/.config/cligpt"
dotenv="${config}/config"
historyPath="${config}/history"
logPath="${config}/log"
listModelVar=0
inerte=0
dependencies="curl jq bat"
declare chatHistory

# echo_err <msg>
function echo_err() {
    [ -z "$1" ] && exit 1
    echo -e "\e[31mERROR :\e[0m $1" > /dev/stderr
    echo_log "ERROR : $1"
}

function echo_info() {
    [ -z "$1" ] && exit 1
    echo "$1"
    echo_log "$1"
}

# echo_log <msg>
# Log message for test purpose
function echo_log() {
    [ -z "$1" ] && exit 1
    local date=$(date "+%Y-%m-%d %H:%M:%S")
    echo -e "[$date] $1" >> "$logPath"
}

function input() {
    [ -z "$1" ] && echo_err $"input : prompt is needed" && exit 1

    local inputText=""
    exec 3<&0 # sauvegarde de l'entrée standard
    exec < /dev/tty # redirection de l'entrée vers le terminal
    read -r -p "$1" inputText
    exec 0<&3 # restauration de l'entrée standard

    [ -z "$inputText" ] && input "$1"

    echo "$inputText"
}

function helpFunc() {
    echo -e $"Usage : $(basename "$0") [option] [text]

Option :
-h or --help ........................... Show help
-v or --version ........................ Show version
-l or --list ........................... List all available model
-m or --model <model> .................. Select model (default : $MODEL)
-t or --temp <temperature> ............. Set temperature (default : $TEMP)
-s or --system [text] .................. Instruction with role system (use \"-\" for stdin)
-c or --clear .......................... Clear history
-L or --list-history ................... List history
-i or --inerte ......................... Do nothing except saving prompt in history

Example :
$(basename "$0") # Interactive mode
$(basename "$0") \"some prompt with role user\"
cat somefile.txt | $(basename "$0") -s - # Instruction mode
cat somefile.txt | $(basename "$0") -s - \"some prompt with role user\"
$(basename "$0") -s \"some prompt with role system\" \"some prompt with role user\""

    exit 0
}

function writeConfig() {
    echo "API_KEY=";
    echo "API_ROUTE=https://api.openai.com/v1";
    echo "MODEL=gpt-3.5-turbo";
    echo "TEMP=0.7";
}

function initConfig() {
    [ ! -d "$config" ] && mkdir "$config" && echo_info "Config are generated"
    [ ! -f "$dotenv" ] && writeConfig > "$dotenv" && echo_info "Dotenv file is generated"
    [ ! -f "$historyPath" ] && touch "$historyPath"
}

# saveHistory <text>
function saveHistory() {
    [ ! -f "$historyPath" ] && echo_err "saveHistory : History file not found" && exit 1
    [ -z "$1" ] && echo_err "saveHistory : Parameter is required" && return 1
    [ "$1" == "null" ] && return 1

    chatHistory+=("$1")
    echo "$1" >> "$historyPath"
}

function loadHistory() {
    [ ! -f "$historyPath" ] && echo_err "loadHistory : History file not found" && exit 1

    while read -r line; do
        chatHistory+=("$line")
    done < "$historyPath"
}

function checkDependencies() {
    for dependency in $dependencies; do
        ! command -v "$dependency" > /dev/null 2>&1 && \
            echo_err "Dependency \"$dependency\" not found" && exit 1
    done
}

function verification() {
    checkDependencies
    [ -z "$API_KEY" ] && echo_err "API_KEY is needed" && exit 1
    [ -z "$MODEL" ] && echo_err "Model is needed" && exit 1
    [ -z "$API_ROUTE" ] && echo_err "API_ROUTE is needed" && exit 1
    [ -z "$TEMP" ] && echo_err "Temperature is needed" && exit 1
}

function readDotenv() {
    [ ! -f "$dotenv" ] && echo_err "readDotenv : Dotenv file not found" && exit 1

    local k
    local v

    while read -r var; do
        [ "${var:0:1}" = "#" ] && continue
        k=${var%=*}
        v=${var#*=}
        [ -n "$k" ] && export "$k=$v"
    done < "$dotenv"
}

# sendRequest <text> [format]
function sendRequest() {
    [ -z "$1" ] && echo_err "sendRequest : Parameter is required" && exit 1
    local format=$([ -z "$2" ] && echo 0 || echo $2)

    local content=$(echo -n "$1" | jq -Rs .)
    saveHistory "{\"role\":\"user\",\"content\":$content}"
    local nbElem=${#chatHistory[@]}
    local data="{\"model\":\"$MODEL\",\"messages\":["
    data+="${chatHistory[0]}"

    if [ "$nbElem" -gt 1 ]; then
        for i in $(seq 1 $(( nbElem-1 ))); do
            data+=",${chatHistory[$i]}"
        done
    fi

    data+="],\"temperature\":$TEMP}"

    local result=$(curl -s \
        -X POST "$API_ROUTE/chat/completions" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $API_KEY" \
        -d "$data" | jq -c '.choices[0].message'
    )

    [ "$result" == "null" ] || [ -z "$result" ] && echo_err "Something wrong with API" && exit 1

    saveHistory "$result"
    local role=$(echo "$result" | jq -r '.role')
    local content=$(echo "$result" | jq -r '.content')

    [ "$format" -eq 1 ] && echo -e "\n\e[31m$role>\e[0m"
    echo "$content" | bat -p -l md
}

function listModel() {
    curl -s "$API_ROUTE/models" \
        -H "Authorization: Bearer $API_KEY" | \
        jq -r '.data[].id'
}

function interactiveMode() {
    while true; do
        printf "\n"
        sendRequest "$(input $'\e[34muser>\e[0m ')" 1
    done
}

initConfig
loadHistory
readDotenv

for i in $(seq 1 $#); do
    case $1 in
        -h | --help)
            helpFunc;;
        -v | --version)
            echo $version
            exit 0;;
        -l | --list)
            listModelVar=1;;
        -m | --model)
            MODEL=$2
            shift;;
        -t | --temp)
            TEMP=$2
            shift;;
        -c | --clear)
            echo -n "" > "$historyPath"
            exit 0;;
        -L | --list-history)
            bat -p -l json "$historyPath"
            exit 0;;
        -s | --system)
            systemText=$([ "$2" == "-" ] && cat /dev/stdin || echo "$2")
            content=$(echo -n "$systemText" | jq -Rs .)
            saveHistory "{\"role\":\"system\",\"content\":$content}"
            shift;;
        -i | --inerte)
            inerte=1;;
        "") ;;
        -*)
            echo_err $"Unknown parameter \"$1\""
            exit 1;;
        *)
            text=$1
            shift
    esac
    shift
done

echo_log "Model: $MODEL, Temperature: $TEMP, Route: $API_ROUTE"
verification

[ $listModelVar -eq 1 ] && listModel && exit 0
[ $inerte -eq 1 ] && exit 0

if [ -z "$text" ]; then
    interactiveMode
else
    sendRequest "$text"
fi
