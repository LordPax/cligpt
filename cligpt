#!/bin/bash

version="v2.3.0"
name="${0##*/}"
config="${HOME}/.config/cligpt"
dotenv="${config}/config"
historyPath="${config}/history"
logPath="${config}/log"
dependencies="curl jq bat xsel notify-send"
speechDependencies="pacat zenity"
ttsDependencies="paplay"
tempDir=""
gui=0
quiet=0
declare chatHistory

# echo_log <msg>
function echo_log() {
    [ -z "$1" ] && exit 1
    local date=$(date '+%F %T')
    echo -e "[$date] $1" >> "$logPath"
}

# notify_info <msg>
function notify_info() {
    [ -z "$1" ] && exit 1
    notify-send "Info" "$1"
}

# notify_error <msg>
function notify_error() {
    [ -z "$1" ] && exit 1
    notify-send "Error" "$1"
}

# echo_err <msg>
function echo_err() {
    [ -z "$1" ] && exit 1

    if [ $gui -eq 0 ] && [ $quiet -eq 0 ]; then
        echo "ERROR : $1" > /dev/stderr
    elif [ $gui -eq 1 ]; then
        notify_error "$1"
    fi
    echo_log "ERROR : $1"
}

# echo_info <msg>
function echo_info() {
    [ -z "$1" ] && exit 1

    if [ $gui -eq 0 ] && [ $quiet -eq 0 ]; then
        echo "$1"
    elif [ $gui -eq 1 ]; then
        notify_info "$1"
    fi
    echo_log "$1"
}

function input() {
    [ -z "$1" ] && echo_err $"input : prompt is needed" && exit 1

    local inputText=""
    exec 3<&0 # sauvegarde de l'entrée standard
    exec < /dev/tty # redirection de l'entrée vers le terminal
    read -r -p "$1" inputText
    exec 0<&3 # restauration de l'entrée standard

    [ -z "$inputText" ] && input "$1"

    echo "$inputText"
}

# randomString <length>
function randomString() {
    [ -z "$1" ] && exit 1
    tr -dc 'a-zA-Z0-9' < /dev/urandom | head -c "$1"
}

# rmTemp <tmpDirectory>
function rmTemp() {
    [ -z "$tempDir" ] && exit 0
    [ ! -d "$tempDir" ] && echo_err "rmTemp : Directory not found" && exit 1
    
    ! echo "$tempDir" | grep -oqE "/tmp/tmp\.[a-zA-Z0-9]{10}" &&
        echo_err "rmTemp : Directory is not a temp directory" && exit 1

    rm -rf "$tempDir"
}

function helpMain() {
    echo -e $"Usage : $name [option] [command]

Option :
-h or --help ........................... Show help
-v or --version ........................ Show version
-l or --list ........................... List all available model
-i or --inerte ......................... Do nothing except saving prompt in history
-q or --quiet .......................... Quiet mode
-c or --clipboard ...................... Save result in clipboard
-g or --gui ............................ Open GUI

Command :
text ................................... Generate text
image .................................. Generate image
speech ................................. Generate text from speech
tts .................................... Generate speech from text"

    exit 0
}

function helpText() {
    echo -e $"Usage : $name [generalOption] text [option] [prompt|-]

Option :
-h or --help ........................... Show help text command
-m or --model <model> .................. Select model (default : $TEXT_MODEL)
-t or --temp <temperature> ............. Set temperature (default : $TEXT_TEMP)
-s or --system [text] .................. Instruction with role system (use \"-\" for stdin)
-c or --clear .......................... Clear history
-l or --list-history ................... List history
--list-json-history .................... List history in json format

Example :
$name text # Interactive mode
$name text \"some prompt with role user\"
echo \"some prompt with role user\" | $name text -
cat somefile.txt | $name text -s - # Instruction mode
cat somefile.txt | $name text -s - \"some prompt with role user\"
$name text -s \"some prompt with role system\" \"some prompt with role user\""

    exit 0
}

function helpImage() {
    echo -e $"Usage : $name [generalOption] image [option] <prompt|->

Option :
-h or --help ........................... Show help image command
-m or --model <model> .................. Select model (default : $IMAGE_MODEL)
-n or --nb <number> .................... Number of image to generate (default : $IMAGE_NB)
-s or --size <size> .................... Size of image (default : $IMAGE_SIZE)
-o or --output <name> .................. Get image in file

Size :
- 256x256
- 512x512
- 1024x1024
- 1024x1792
- 1792x1024

Example :
$name image \"some prompt\"
echo \"some prompt\" | $name image -
$name image -o image.png \"some prompt\""

    exit 0
}

function helpSpeech() {
    echo -e $"Usage : $name [generalOption] speech [option] [file]

Option :
-h or --help ........................... Show help speech command
-m or --model <model> .................. Select model (default : $SPEECH_MODEL)
-l or --lang <language> ................ Select language (default : $SPEECH_LANG)

Example :
$name speech # record audio and generate text
$name speech somefile.ogg
$name -c -g speech"

    exit 0
}

function helpTTS() {
    echo -e $"Usage : $name [generalOption] tts [option] [text|-]

Option :
-h or --help ........................... Show help tts command
-m or --model <model> .................. Select model (default : $TTS_MODEL)
-v or --voice <voice> .................. Select voice (default : $TTS_VOICE)
-s or --speed <speed> .................. Select speed (default : $TTS_SPEED)
-f or --format <format> ................ Select format (default : $TTS_FORMAT)
-o or --output <name> .................. Get speech in file

Voice :
- alloy
- echo
- fable
- onyx
- nova
- shimmer

Example :
$name tts \"some text\" # play audio
echo \"some text\" | $name tts -
$name tts -o speech.mp3 \"some text\""

    exit 0
}

function writeConfig() {
    echo "API_KEY=";
    echo "API_ROUTE=https://api.openai.com/v1";
    echo "TEXT_MODEL=gpt-4";
    echo "TEXT_TEMP=0.7";
    echo "IMAGE_MODEL=dall-e-3";
    echo "IMAGE_NB=1";
    echo "IMAGE_SIZE=1024x1024";
    echo "SPEECH_MODEL=whisper-1";
    echo "SPEECH_LANG=fr";
    echo "TTS_MODEL=tts-1"
    echo "TTS_VOICE=alloy"
    echo "TTS_SPEED=1.0"
    echo "TTS_FORMAT=mp3"
}

function initConfig() {
    [ ! -d "$config" ] && mkdir "$config" && echo_info "Config are generated"
    [ ! -f "$dotenv" ] && writeConfig > "$dotenv" && echo_info "Dotenv file is generated"
    [ ! -f "$historyPath" ] && touch "$historyPath"
}

# saveHistory <text>
function saveHistory() {
    [ ! -f "$historyPath" ] && echo_err "saveHistory : History file not found" && exit 1
    [ -z "$1" ] && echo_err "saveHistory : Parameter is required" && return 1
    [ "$1" == "null" ] && return 1

    chatHistory+=("$1")
    echo "$1" >> "$historyPath"
}

function loadHistory() {
    [ ! -f "$historyPath" ] && echo_err "loadHistory : History file not found" && exit 1

    while read -r line; do
        chatHistory+=("$line")
    done < "$historyPath"
}

# listHistory <0|1>
# 0 : normal mode
# 1 : quiet mode
function listHistory() {
    [ -z "$1" ] && echo_err "listHistory : Parameter is required" && exit 1
    [ ${#chatHistory[@]} -eq 0 ] && echo_info "History is empty" && exit 0

    for i in "${!chatHistory[@]}"; do
        local hist=${chatHistory[$i]}
        local role=$(echo "$hist" | jq -r '.role')
        local content=$(echo "$hist" | jq -r '.content')

        [ "$i" -ne 0 ] && printf "\n"

        case $role in
            "system") echo -e "\e[32msystem>\e[0m" ;;
            "user") echo -e "\e[34muser>\e[0m" ;;
            "assistant") echo -e "\e[31massistant>\e[0m" ;;
        esac

        echo "$content" | bat -p -l md
    done
}

function checkDependencies() {
    local deps="$dependencies"

    if [ "$1" == "speech" ]; then
        deps="$speechDependencies"
    elif [ "$1" == "tts" ]; then
        deps="$ttsDependencies"
    fi

    for dependency in $deps; do
        ! command -v "$dependency" > /dev/null 2>&1 &&
            echo_err "Dependency \"$dependency\" not found" && exit 1
    done
}

function verification() {
    [ -z "$API_KEY" ] && echo_err "API_KEY is needed" && exit 1
    [ -z "$API_ROUTE" ] && echo_err "API_ROUTE is needed" && exit 1
    [ -z "$TEXT_MODEL" ] && echo_err "Text model is needed" && exit 1
    [ -z "$TEXT_TEMP" ] && echo_err "Text temperature is needed" && exit 1
    [ -z "$IMAGE_MODEL" ] && echo_err "Image model is needed" && exit 1
    [ -z "$IMAGE_NB" ] && echo_err "Number of image is needed" && exit 1
    [ -z "$IMAGE_SIZE" ] && echo_err "Size of image is needed" && exit 1
    [ -z "$SPEECH_MODEL" ] && echo_err "Speech model is needed" && exit 1
    [ -z "$SPEECH_LANG" ] && echo_err "Speech language is needed" && exit 1
    [ -z "$TTS_MODEL" ] && echo_err "TTS model is needed" && exit 1
    [ -z "$TTS_VOICE" ] && echo_err "TTS voice is needed" && exit 1
    [ -z "$TTS_SPEED" ] && echo_err "TTS speed is needed" && exit 1
    [ -z "$TTS_FORMAT" ] && echo_err "TTS format is needed" && exit 1
}

function readConfig() {
    [ ! -f "$dotenv" ] && echo_err "readConfig : Dotenv file not found" && exit 1

    local k
    local v

    while read -r var; do
        [ "${var:0:1}" = "#" ] && continue
        k=${var%=*}
        v=${var#*=}
        [ -n "$k" ] && export "$k=$v"
    done < "$dotenv"
}

# sendTextRequest <text> [format]
function sendTextRequest() {
    [ -z "$1" ] && echo_err "sendTextRequest : Parameter is required" && exit 1
    local format=$([ -z "$2" ] && echo 0 || echo "$2")

    local content=$(echo -n "$1" | jq -Rs .)
    saveHistory "{\"role\":\"user\",\"content\":$content}"
    local nbElem=${#chatHistory[@]}
    local data="{\"model\":\"$TEXT_MODEL\",\"messages\":["
    data+="${chatHistory[0]}"

    if [ "$nbElem" -gt 1 ]; then
        for i in $(seq 1 $(( nbElem-1 ))); do
            data+=",${chatHistory[$i]}"
        done
    fi

    data+="],\"temperature\":$TEXT_TEMP}"

    local result=$(curl -s \
        -X POST "$API_ROUTE/chat/completions" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $API_KEY" \
        -d "$data" | jq -c '.choices[0].message'
    )

    [ "$result" == "null" ] || [ -z "$result" ] &&
        echo_err "Something wrong with API" && exit 1

    saveHistory "$result"
    local role=$(echo "$result" | jq -r '.role')
    local content=$(echo "$result" | jq -r '.content')

    if [ $clipboard -eq 1 ]; then
        echo -n "$content" | xsel --clipboard -i
        echo_info "Text copied to clipboard"
        exit 0
    fi

    [ "$format" -eq 1 ] && echo -e "\n\e[31m$role>\e[0m"
    echo "$content" | bat -p -l md
}

function listModel() {
    curl -s "$API_ROUTE/models" \
        -H "Authorization: Bearer $API_KEY" |
        jq -r '.data[].id'
}

function interactiveMode() {
    listHistory 1
    while true; do
        printf "\n"
        sendTextRequest "$(input $'\e[34muser>\e[0m ')" 1
    done
}

# systemText <text>
function systemText() {
    [ -z "$1" ] && echo_err "systemText : Parameter is required" && exit 1

    local systemStr=$([ "$1" == "-" ] && cat /dev/stdin || echo "$1")
    local content=$(echo -n "$systemStr" | jq -Rs .)
    local data=$(jq -cn \
        --argjson content "$content" '
        {
            role: "system",
            content: $content
        }'
    )

    saveHistory "$data"
}

# infoRecord <msg>
function infoRecord() {
    [ -z "$1" ] && exit 1
    zenity --info --text="$1" --title="Info"
    pkill pacat
}

function recordVoice() {
    local randomName=$(randomString 10)
    tempDir=$(mktemp -d)
    file="$tempDir/${randomName}.ogg"

    if [ $gui -eq 1 ]; then
        infoRecord "Recording audio (Ok to stop) ..." &
    elif [ $quiet -eq 0 ]; then
        echo "Recording audio (Ctrl+C to stop) ..." > /dev/stderr
    fi

    # Change this command if you want to use another audio recorder
    pacat --file-format=oga -r "$file"
}

function saveToTmp() {
    local randomName=$(randomString 10)
    tempDir=$(mktemp -d)
    echo "$tempDir/${randomName}.${TTS_FORMAT}"
}

# sendImageGenerationRequest <text>
function sendImageGenerationRequest() {
    [ -z "$1" ] && echo_err "sendImageGenerationRequest : Parameter is required" && exit 1

    local format=$([ -z "$output" ] && echo "url" || echo "b64_json")
    local content=$(echo -n "$1" | jq -Rs .)
    local data=$(jq -cn \
        --arg model "$IMAGE_MODEL" \
        --argjson prompt "$content" \
        --argjson n "$IMAGE_NB" \
        --arg size "$IMAGE_SIZE" \
        --arg response_format "$format" '
        {
            model: $model,
            prompt: $prompt,
            n: $n,
            size: $size,
            response_format: $response_format
        }'
    )

    local result=$(curl -s \
        -X POST "$API_ROUTE/images/generations" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $API_KEY" \
        -d "$data"
    )

    if echo "$result" | grep -q "error"; then
        local error=$(echo "$result" | jq -r '.error.message')
        echo_err "$error"
        exit 1
    fi

    [ "$result" == "null" ] || [ -z "$result" ] &&
        echo_err "Something wrong with API" && exit 1
    local image=$(echo "$result" | jq -r ".data[].$format")

    if [ "$format" == "b64_json" ]; then
        echo "$image" | base64 -d > "$output"
        echo_info "Image saved to \"$output\""
        exit 0
    fi
    
    echo "$image"
}

# sendSpeechRequest <file>
function sendSpeechRequest() {
    [ -z "$1" ] && echo_err "sendSpeechRequest : Parameter is required" && rmTemp && exit 1

    local result=$(curl -s \
        -X POST "$API_ROUTE/audio/transcriptions" \
        -H "Authorization: Bearer $API_KEY" \
        -H "Content-Type: multipart/form-data" \
        -F "file=@$1" \
        -F "model=\"$SPEECH_MODEL\"" \
        -F "language=\"$SPEECH_LANG\""
    )

    if echo "$result" | grep -q "error"; then
        local error=$(echo "$result" | jq -r '.error.message')
        echo_err "$error"
        rmTemp
        exit 1
    fi

    [ "$result" == "null" ] || [ -z "$result" ] &&
        echo_err "Something wrong with API" && rmTemp && exit 1

    local text=$(echo "$result" | jq -r '.text')

    if [ $clipboard -eq 1 ]; then
        echo -n "$text" | xsel --clipboard -i
        echo_info "Text copied to clipboard"
        exit 0
    fi

    echo "$text"
}

# sendTtsRequest <text>
function sendTtsRequest() {
    [ -z "$1" ] && echo_err "sendTtsRequest : Parameter is required" && rmTemp && exit 1

    local content=$(echo -n "$1" | jq -Rs .)
    local data=$(jq -cn \
        --arg model "$TTS_MODEL" \
        --arg voice "$TTS_VOICE" \
        --arg speed "$TTS_SPEED" \
        --arg format "$TTS_FORMAT" \
        --argjson input "$content" '
        {
            model: $model,
            voice: $voice,
            speed: $speed,
            format: $format,
            input: $input
        }'
    )

    curl -s \
        -X POST "$API_ROUTE/audio/speech" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $API_KEY" \
        -d "$data" \
        --output "$output"
}

function textCommand() {
    for _ in $(seq 1 $#); do
        case $1 in
            -h | --help)
                helpText;;
            -m | --model)
                TEXT_MODEL=$2
                shift;;
            -t | --temp)
                TEXT_TEMP=$2
                shift;;
            -c | --clear)
                echo -n "" > "$historyPath"
                exit 0;;
            -l | --list-history)
                listHistory $quiet
                exit 0;;
            --list-json-history)
                bat -p -l json "$historyPath"
                exit 0;;
            -s | --system)
                systemText "$2"
                shift;;
            -)
                prompt=$(cat /dev/stdin);;
            "") ;;
            -*)
                echo_err $"Unknown parameter \"$1\""
                exit 1;;
            *)
                prompt=$1
                shift
        esac
        shift
    done

    verification

    [ $inerte -eq 1 ] && exit 0
    [ -z "$prompt" ] && interactiveMode && exit 0

    sendTextRequest "$prompt"
}

function imageCommand() {
    local output=""

    for _ in $(seq 1 $#); do
        case $1 in
            -h | --help)
                helpImage;;
            -m | --model)
                IMAGE_MODEL=$2
                shift;;
            -n | --nb)
                IMAGE_NB=$2
                shift;;
            -s | --size)
                IMAGE_SIZE=$2
                shift;;
            -o | --output)
                output=$2
                shift;;
            -)
                prompt=$(cat /dev/stdin);;
            "") ;;
            -*)
                echo_err $"Unknown parameter \"$1\""
                exit 1;;
            *)
                prompt=$1
                shift
        esac
        shift
    done

    verification

    [ $inerte -eq 1 ] && exit 0
    [ -z "$prompt" ] && echo_err "Image prompt is needed" && exit 1

    echo_info "Generating image ..."
    sendImageGenerationRequest "$prompt"
}


function speechCommand() {
    checkDependencies speech

    local file=""

    for _ in $(seq 1 $#); do
        case $1 in
            -h | --help)
                helpSpeech;;
            -m | --model)
                SPEECH_MODEL=$2
                shift;;
            -l | --lang)
                SPEECH_LANG=$2
                shift;;
            "") ;;
            -*)
                echo_err $"Unknown parameter \"$1\""
                exit 1;;
            *)
                file=$1
                shift
        esac
        shift
    done

    verification

    [ $inerte -eq 1 ] && exit 0
    [ -z "$file" ] && recordVoice
    [ ! -f "$file" ] && echo_err "File not found" && rmTemp && exit 1

    sendSpeechRequest "$file"
    rmTemp
}

function ttsCommand() {
    checkDependencies tts

    local output=""
    local prompt=""
    local play=1

    for _ in $(seq 1 $#); do
        case $1 in
            -h | --help)
                helpTTS;;
            -m | --model)
                TTS_MODEL=$2
                shift;;
            -v | --voice)
                TTS_VOICE=$2
                shift;;
            -s | --speed)
                TTS_SPEED=$2
                shift;;
            -f | --format)
                TTS_FORMAT=$2
                shift;;
            -o | --output)
                output=$2
                play=0
                shift;;
            -)
                prompt=$(cat /dev/stdin);;
            "") ;;
            -*)
                echo_err $"Unknown parameter \"$1\""
                exit 1;;
            *)
                prompt=$1
                shift
        esac
        shift
    done

    verification

    [ $inerte -eq 1 ] && exit 0
    [ -z "$prompt" ] && echo_err "TTS prompt is needed" && exit 1
    [ -z "$output" ] && output=$(saveToTmp)

    echo_info "Generating speech ..."
    sendTtsRequest "$prompt"

    if [ $play -eq 0 ]; then
        echo_info "Speech saved to \"$output\""
        rmTemp
        exit 0
    fi

    echo_info "Playing speech ..."
    paplay "$output"
    rmTemp
}

function main() {
    local prompt=""
    local inerte=0
    local clipboard=0

    for _ in $(seq 1 $#); do
        case $1 in
            -h | --help)
                helpMain;;
            -v | --version)
                echo $version
                exit 0;;
            -l | --list)
                listModel
                exit 0;;
            -i | --inerte)
                inerte=1;;
            -q | --quiet)
                quiet=1;;
            -c | --clipboard)
                clipboard=1;;
            -g | --gui)
                gui=1;;
            text)
                shift
                textCommand "$@"
                exit 0;;
            image)
                shift
                imageCommand "$@"
                exit 0;;
            speech)
                shift
                speechCommand "$@"
                exit 0;;
            tts)
                shift
                ttsCommand "$@"
                exit 0;;
            "") ;;
            *)
                echo_err $"Unknown parameter \"$1\""
                exit 1;;
        esac
        shift
    done

    helpMain
}

checkDependencies
initConfig
readConfig
loadHistory
main "$@"
